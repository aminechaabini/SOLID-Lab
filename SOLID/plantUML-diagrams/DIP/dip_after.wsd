@startuml

interface Encoder {
    + encode(string: String): String
}

class Base64Encoder {
    + encode(string: String): String
}

class EncodingModule {
    - encoder: Encoder
    + EncodingModule(encoder: Encoder)
    + encodeWithFiles(reader: Reader, writer: Writer): void
    + encodeBasedOnNetworkAndDatabase(reader: Reader, writer: Writer): void
}

class EncodingModuleClient {
    + main(args: String[]): void
}

interface Reader {
    + read(): int
}

interface Writer {
    + write(string: String): int
}

class File {
    + read(): int
    + write(string: String): int
}

class MyDatabase {
    - _data: Map<Integer, String>
    - _count: int
    + write(inputString: String): int
}

class MyNetwork {
    + read(): int
}

Encoder <|.. Base64Encoder
EncodingModule --> Encoder
EncodingModule ..> Reader
EncodingModule ..> Writer
EncodingModuleClient --> EncodingModule
EncodingModuleClient --> File
EncodingModuleClient --> MyNetwork
EncodingModuleClient --> MyDatabase
EncodingModuleClient --> Base64Encoder
Reader <|.. File
Writer <|.. File
Writer <|.. MyDatabase
Reader <|.. MyNetwork

@enduml
